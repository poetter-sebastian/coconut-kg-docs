{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>The current release is a linked data version of COCONUT (COlleCtion of Open Natural ProdUcTs). COCONUT gathers data from over 50 open natural product resources and contains stereochemical forms, literature, organisms that produce them, natural geographical presence and diverse pre-computed molecular properties. Our knowledge graph is called COCONUT[KG]. For more information on COCONUT itself, check out their documentation.</p>"},{"location":"code/","title":"Index","text":"<pre><code>\nfrom SPARQLWrapper import SPARQLWrapper, JSON\n\nsparql = SPARQLWrapper(\n    \"http://coconut-kg.aksw.org/sparql\"\n)\nsparql.setReturnFormat(JSON)\n\nsparql.setQuery(\n    \"\"\"\n    PREFIX coco:  &lt;http://coconut-kg.aksw.org/ontology#&gt;\n    PREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\n    PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n    PREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\n    PREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\n    SELECT DISTINCT ?formula ?name ?weight ?smile WHERE {\n        ?compound a coco:Compound .\n        ?compound coco:molecularFormula ?formula .\n        ?compound coco:name ?name .\n\n        ?compound coco:hasDescriptors ?descriptor .\n        ?descriptor coco:isMolecular ?mdescriptor .\n        ?mdescriptor coco:molecularWeight ?weight .\n\n        ?compound coco:isIdentifiedBy ?unique .\n        ?unique coco:smiles ?smile .}\n\n    LIMIT 10\n    \"\"\"\n)\n\ntry:\n    ret = sparql.queryAndConvert()\n\n    for r in ret[\"results\"][\"bindings\"]:\n        print(r)\nexcept Exception as e:\n    print(e)\n\n</code></pre>"},{"location":"dataset/","title":"Dataset statistics","text":"triples 296853511 entities 1536262 object properties 15 data properties 80 classes 12 <p>Triples: The data was stored as RDF triples. A triple consists of subject, predicate and object.</p> <p>Entities: In this context, an entity is a chemical compound.</p> <p>Object properties: Are used to connect classes. coco:hasDescriptors is an example for an object property.</p> <p>Data properties: Are used to add attributes to classes. coco:molecularWeight is an example for a data property.</p> <p>Classes: They are used to classify a resource. In COCONUT[KG] coco:Geolocation would be a class.</p> <p>Below is a table of all the data properties and their appearance count in the dataset:</p>"},{"location":"extraction/","title":"Extraction process","text":""},{"location":"extraction/#extraction-process","title":"Extraction process","text":"<p>COCONUT provides the data as MongoDB dump. The database contains the data in several parts. The largest part is in sourceNaturalProducts. We have exported this as json for better processing. Using a self created schema, we set up several rules to transform the json data into RDF data. For the transformation we used eccenca corporate memory</p> <p>The schema can be found at http://coconut-kg.aksw.org/dataset/index.html</p>"},{"location":"extraction/#schema-creation-process","title":"Schema creation process","text":"<p>Some properties occur multiple times in a original Coconut record. This is probably due to the fact that Coconut has been created from multiple datasets. We decided not to transfer these duplications into our ontology, as far as they are visible to us. We used the command line tool jq to verify the duplicates. For example to validate if there is no simpleInchi and inchi which doesn't share the same information we used: <code>jq 'select(.simpleInchi != .uniqueNaturalProduct.inchi)' sourceNaturalProduct.jsonl</code></p> <p>List of duplicates:</p> <ul> <li> <p><code>$oid</code> and <code>$oid</code></p> </li> <li> <p><code>totalAtomNumber</code> and <code>total_atom_number</code> </p> </li> <li> <p><code>simpleInchi</code> and <code>inchi</code></p> </li> <li> <p><code>simpleInchiKey</code> and <code>inchikey</code></p> </li> </ul> <p>We have decided to merge <code>citation</code> and <code>citationDOI</code> to <code>citationDOI</code>.</p> <p><code>synonyms</code> and <code>uniqueNaturalProduct.synonyms</code> will also be merged.</p> <p>Since in many cases there is no information in the property <code>continent</code> and in <code>geoLocation</code> there is information about the origin, we decided to keep only <code>geoLocation</code>.</p> <p>We also used the command line tool jq to find out which properties do not contain values. For example with the following command: <code>jq '.uniqueNaturalProduct.collection | select(length &gt; 0)' sourceNaturalProduct.jsonl</code></p> <p>List of empty properties:</p> <ul> <li> <p><code>allTaxa</code></p> </li> <li> <p><code>collection</code></p> </li> <li> <p><code>allWikidataIds</code></p> </li> <li> <p><code>taxid</code></p> </li> <li> <p><code>allChemClassifications</code></p> </li> </ul>"},{"location":"improve/","title":"Improving","text":"<p>Requests and ideas for improvement are recorded here.</p>"},{"location":"improve/#current-dataset-issues","title":"Current dataset issues","text":"<ul> <li>The taxonomy data is currently not yet satisfactory.</li> <li>Some properties might have some \"urn:instance ...\" entries, which equals no data.</li> </ul>"},{"location":"improve/#planned-future-updates","title":"Planned future updates","text":"<ul> <li>In-depth refinement of the taxonomy data.</li> <li>Remove empty properties/properties that falsely hold automated data(currently: taxonomyReferenceObjects, all textTaxa that simply say \"notax\")</li> <li>Further improve the ontology with input from chemists and biologists.</li> </ul>"},{"location":"query/","title":"Querying COCONUT[KG]","text":"<p>COCONUT[KG] allows a variety of queries on a large number of natural products. You can query the COCONUT[KG] online with a SPARQL endpoint.</p>"},{"location":"query/#sparql-endpoint","title":"SPARQL endpoint","text":"<p>At http://coconut-kg.aksw.org/sparql you'll find a SPARQL endpoint. Both back-end and front-end are provided by OpenLink Virtuoso. The back-end serves a SPARQL engine. In the front-end we find a HTTP/SPARQL server with nginx overlay.</p> <p>NOTE: Before using the SPARQL endpoint we recommend to read this documentation first</p>"},{"location":"query/#sparql-endpoint-details","title":"SPARQL endpoint details","text":""},{"location":"query/#endpoint-type","title":"Endpoint type","text":"<p>The SPARQL enpoint is provided by the OpenLink Software Virtuoso</p>"},{"location":"query/#rates-and-limitations","title":"Rates and limitations","text":"<p>You can make a limited number of connections. The settings can be seen below:</p> <pre><code>        ResultSetMaxRows           = 25000\n        MaxQueryExecutionTime      =   600  (seconds)\n        MaxQueryCostEstimationTime =   400  (seconds)\n        Connection limit           =    10  (parallel connections per IP address\n</code></pre> <p>ATTENTION: The result size is currently limited to 25000 rows. This way partial results are displayed as complete ones and there is no HTTP error.</p>"},{"location":"query/#sparql-example-queries","title":"SPARQL example queries","text":"<p>The following query gives you formula, name, weight and smile of a compound:</p> <pre><code>PREFIX coco: &lt;http://coconut-kg.aksw.org/ontology#&gt;\nPREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\nPREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\nSELECT DISTINCT ?formula ?name ?weight ?smile WHERE {\n  ?compound a coco:Compound . \n  ?compound coco:molecularFormula ?formula .\n  ?compound coco:name ?name .\n\n  ?compound coco:hasDescriptors ?descriptor .\n  ?descriptor coco:isMolecular ?mdescriptor .\n  ?mdescriptor coco:molecularWeight ?weight .\n\n  ?compound coco:isIdentifiedBy ?unique .\n  ?unique coco:smiles ?smile .\n} \nLIMIT 10\n</code></pre> <p>The following query gives you formula and weight of a compound where the weight is between 320.00 and 320.20:</p> <pre><code>PREFIX coco: &lt;http://coconut-kg.aksw.org/ontology#&gt;\nPREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\nPREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\nSELECT DISTINCT ?formula ?weight  WHERE {\n  ?compound a coco:Compound . \n  ?compound coco:molecularFormula ?formula .\n\n  ?compound coco:hasDescriptors ?descriptor .\n  ?descriptor coco:isMolecular ?mdescriptor .\n  ?mdescriptor coco:molecularWeight ?weight .\n\nFILTER (?weight &gt; 320.00 &amp;&amp; ?weight &lt; 320.20) .\n} \nLIMIT 10\n</code></pre> <p>It is also possible to query without our query GUI, but with a self written script that connects to our endpoint. Below is a example in python with SPARQLWrapper:</p> <pre><code>from SPARQLWrapper import SPARQLWrapper, JSON\n\nsparql = SPARQLWrapper(\n    \"http://coconut-kg.aksw.org/sparql\"\n)\nsparql.setReturnFormat(JSON)\n\nsparql.setQuery(\n    \"\"\"\n    PREFIX coco:  &lt;http://coconut-kg.aksw.org/ontology#&gt;\n    PREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\n    PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n    PREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\n    PREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n    SELECT DISTINCT ?formula ?name ?weight ?smile WHERE {\n        ?compound a coco:Compound .\n        ?compound coco:molecularFormula ?formula .\n        ?compound coco:name ?name .\n        ?compound coco:hasDescriptors ?descriptor .\n        ?descriptor coco:isMolecular ?mdescriptor .\n        ?mdescriptor coco:molecularWeight ?weight .\n        ?compound coco:isIdentifiedBy ?unique .\n        ?unique coco:smiles ?smile .}\n    LIMIT 10\n    \"\"\"\n)\n\ntry:\n    ret = sparql.queryAndConvert()\n\n    for r in ret[\"results\"][\"bindings\"]:\n        print(r)\nexcept Exception as e:\n    print(e)\n</code></pre> <p>You can check out a real simple tutorial for SPARQL here:</p>"}]}